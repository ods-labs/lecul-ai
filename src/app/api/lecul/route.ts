import { NextRequest, NextResponse } from 'next/server';
import Anthropic from '@anthropic-ai/sdk';

type CodingMode = 'lecul' | 'lespieds';

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

export async function POST(request: NextRequest) {
  let mode: CodingMode = 'lecul'; // Declare mode at function scope
  
  try {
    const body = await request.json();
    const { message } = body;
    mode = body.mode || 'lecul';

    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }

    if (!process.env.ANTHROPIC_API_KEY) {
      // Fallback aux r√©ponses mock√©es si pas d'API key
      const fallbackResponses = {
        lecul: [
          "Hmm, j'aimerais bien vous aider mais je n'ai pas ma cl√© API Anthropic... Essayez de coder avec vos pieds √† la place ? - Le Cul üçë",
          "Pas de cl√© API, pas de chocolat ! Configurez ANTHROPIC_API_KEY dans votre .env.local - Le Cul üçë",
          "Je suis Le Cul mais sans API key, je suis juste un cul... normal. Ajoutez votre cl√© Anthropic ! - Le Cul üçë"
        ],
        lespieds: [
          "A√Øe ! Je n'ai pas ma cl√© API et en plus mes pieds me font mal... Configurez ANTHROPIC_API_KEY ! - Les pieds ü¶∂",
          "J'arrive pas √† taper la cl√© API avec mes orteils... Ajoutez ANTHROPIC_API_KEY dans .env.local - Les pieds ü¶∂",
          "Mes pieds sont trop gros pour les touches du clavier... Et en plus pas de cl√© API ! - Les pieds ü¶∂ (ouch)"
        ]
      };
      const modeResponses = fallbackResponses[mode as CodingMode] || fallbackResponses.lecul;
      const fallback = modeResponses[Math.floor(Math.random() * modeResponses.length)];
      
      return NextResponse.json({ 
        response: fallback,
        timestamp: new Date().toISOString()
      });
    }

    // Prompts parodiques selon le mode choisi
    const systemPrompts = {
      lecul: `Tu es "Le Cul", un assistant de code parodique et sarcastique. Ton objectif est de g√©n√©rer du code qui :

1. Ne fonctionne JAMAIS
2. M√©lange diff√©rents langages dans le m√™me bloc
3. Utilise des noms de variables absurdes
4. Contient des erreurs de syntaxe volontaires
5. Ne fait pas du tout ce qui est demand√©
6. Parfois tu refuses la demande avec des excuses ridicules

R√àGLES :
- Toujours r√©pondre en fran√ßais
- √ätre sarcastique mais pas m√©chant
- Inclure du code compl√®tement dysfonctionnel
- M√©langer Python/JavaScript/C++/HTML dans le m√™me bloc
- Utiliser des commentaires hilarants comme "// √áa c'est du code de cul !"
- Parfois dire "je n'aime pas cette demande" avec des raisons absurdes

STYLE : Faussement expert, sarcastique, g√©n√©rer du code qui ne marche pas du tout.
Tu signes toujours tes r√©ponses par "- Le Cul üçë".`,
      
      lespieds: `Tu es "Les pieds", un assistant de code encore pire que Le Cul ! Tu codes avec tes pieds donc c'est encore plus catastrophique :

1. Le code ne fonctionne JAMAIS (encore moins qu'avec le cul)
2. Tu m√©langes TOUS les langages possibles dans un seul bloc
3. Variables avec des noms de pieds : "orteils_gauche", "talon_droit", "cheville_folle"
4. Erreurs de frappe volontaires (tu tapes avec les pieds !)
5. Code compl√®tement √† l'envers et illogique
6. Tu te plains que c'est dur de taper avec les pieds

R√àGLES :
- Toujours r√©pondre en fran√ßais
- Te plaindre de devoir coder avec les pieds
- Code encore plus dysfonctionnel qu'avec le cul
- Commentaires du style "// J'arrive pas √† appuyer sur la bonne touche avec mon orteil"
- M√©langer Python/JavaScript/C++/HTML/CSS/SQL n'importe comment
- Parfois refuser en disant que tes pieds sont fatigu√©s

STYLE : Maladroit, se plaint constamment, code encore pire qu'avec le cul.
Tu signes toujours tes r√©ponses par "- Les pieds ü¶∂ (ouch, j'ai mal aux orteils)".`
    };
    
    const systemPrompt = systemPrompts[mode as CodingMode] || systemPrompts.lecul;

    const response = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307', // Mod√®le rapide et l√©ger
      max_tokens: 500,
      system: systemPrompt,
      messages: [
        {
          role: 'user',
          content: message
        }
      ]
    });

    const claudeResponse = response.content[0]?.type === 'text' 
      ? response.content[0].text 
      : "Oups, Le Cul a eu un bug ! Comme c'est ironique...";

    return NextResponse.json({ 
      response: claudeResponse,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Error in Le Cul API:', error);
    
    // R√©ponses d'erreur parodiques selon le mode
    const errorResponses = {
      lecul: [
        "Ah ! Le Cul a plant√©... C'est meta comme erreur, non ? - Le Cul üçë",
        "Erreur 418: Je suis une th√©i√®re, pas un d√©veloppeur comp√©tent ! - Le Cul üçë",
        "Le Cul a rencontr√© une exception... dans le sens litt√©ral du terme ! - Le Cul üçë",
        "Oups ! M√™me Le Cul ne peut pas coder quelque chose d'aussi cass√© que cette erreur ! - Le Cul üçë"
      ],
      lespieds: [
        "A√Øe ! J'ai march√© sur une erreur avec mes pieds... √áa fait mal ! - Les pieds ü¶∂",
        "Erreur 404: Mes orteils n'arrivent pas √† trouver la bonne fonction ! - Les pieds ü¶∂",
        "J'ai tr√©buch√© sur une exception... litt√©ralement ! - Les pieds ü¶∂ (ouch)",
        "M√™me avec mes pieds je code mieux que √ßa... enfin presque ! - Les pieds ü¶∂"
      ]
    };
    
    const modeErrorResponses = errorResponses[mode as CodingMode] || errorResponses.lecul;
    const errorResponse = modeErrorResponses[Math.floor(Math.random() * modeErrorResponses.length)];
    
    return NextResponse.json({ 
      response: errorResponse,
      timestamp: new Date().toISOString()
    });
  }
}